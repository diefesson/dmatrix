package com.diefesson.dmatrix.view;

import com.diefesson.dmatrix.control.DMatrixControl;
import com.diefesson.dmatrix.control.EditorMatrizControl;
import com.diefesson.dmatrix.model.Historico;
import com.diefesson.dmatrix.model.Matriz;
import javax.swing.table.DefaultTableModel;

import javax.swing.SwingUtilities;

/**
 *
 * @author Diefesson de Sousa Silva
 */
public class EditorMatrizView extends javax.swing.JFrame {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textoLinhas = new javax.swing.JLabel();
        textoColunas = new javax.swing.JLabel();
        spinnerColunas = new javax.swing.JSpinner();
        spinnerLinhas = new javax.swing.JSpinner();
        textoNome = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        botaoSalvar = new javax.swing.JButton();
        botaoRedimensionar = new javax.swing.JButton();
        panelMatriz = new com.diefesson.dmatrix.view.PanelMatriz();
        menuBar = new javax.swing.JMenuBar();
        menuCriar = new javax.swing.JMenu();
        menuCriarIdentidade = new javax.swing.JMenuItem();
        menuCriarAleatoria = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DMatrix - Matriz");
        setAlwaysOnTop(true);

        textoLinhas.setText("Linhas:");

        textoColunas.setText("Colunas:");

        spinnerColunas.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));

        spinnerLinhas.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));

        textoNome.setText("Nome");

        botaoSalvar.setText("SALVAR");
        botaoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSalvarActionPerformed(evt);
            }
        });

        botaoRedimensionar.setText("redimensionar");
        botaoRedimensionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRedimensionarActionPerformed(evt);
            }
        });

        menuCriar.setText("Criar");

        menuCriarIdentidade.setText("Matriz identidade");
        menuCriarIdentidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCriarIdentidadeActionPerformed(evt);
            }
        });
        menuCriar.add(menuCriarIdentidade);

        menuCriarAleatoria.setText("Matriz aleatória");
        menuCriarAleatoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCriarAleatoriaActionPerformed(evt);
            }
        });
        menuCriar.add(menuCriarAleatoria);

        menuBar.add(menuCriar);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoColunas)
                            .addComponent(textoLinhas, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerColunas)
                            .addComponent(spinnerLinhas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoRedimensionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textoNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botaoSalvar))
                            .addComponent(campoNome))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textoLinhas)
                            .addComponent(spinnerLinhas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoNome)
                            .addComponent(botaoSalvar))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textoColunas)
                                    .addComponent(spinnerColunas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(botaoRedimensionar, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMatriz, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoRedimensionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRedimensionarActionPerformed
        atualizarControl();//manda os dados da tabela para a matriz
        control.redimensionar((int) spinnerLinhas.getValue(), (int) spinnerColunas.getValue());//redimensiona a matriz
        atualizarView();//e então recebe os da matriz para a tabelas
    }//GEN-LAST:event_botaoRedimensionarActionPerformed

    private void botaoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSalvarActionPerformed
        atualizarControl();
        control.salvar();
        dispose();
    }//GEN-LAST:event_botaoSalvarActionPerformed

    private void menuCriarIdentidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCriarIdentidadeActionPerformed
        int ordem = (int) spinnerLinhas.getValue();
        Matriz.preencherIdentidade(control.obterMatriz());
        atualizarView();
    }//GEN-LAST:event_menuCriarIdentidadeActionPerformed

    private void menuCriarAleatoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCriarAleatoriaActionPerformed
        int m = (int) spinnerLinhas.getValue();
        int n = (int) spinnerColunas.getValue();

        Matriz matriz = control.obterMatriz();
        matriz.redimensionar(m, n);
        Matriz.PreencherAleatorio(matriz, -10, 11, true);

        atualizarView();
    }//GEN-LAST:event_menuCriarAleatoriaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorMatrizView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorMatrizView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorMatrizView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorMatrizView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorMatrizView(new DMatrixControl(null), true).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoRedimensionar;
    private javax.swing.JButton botaoSalvar;
    private javax.swing.JTextField campoNome;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuCriar;
    private javax.swing.JMenuItem menuCriarAleatoria;
    private javax.swing.JMenuItem menuCriarIdentidade;
    private com.diefesson.dmatrix.view.PanelMatriz panelMatriz;
    private javax.swing.JSpinner spinnerColunas;
    private javax.swing.JSpinner spinnerLinhas;
    private javax.swing.JLabel textoColunas;
    private javax.swing.JLabel textoLinhas;
    private javax.swing.JLabel textoNome;
    // End of variables declaration//GEN-END:variables

    private final EditorMatrizControl control;

    public EditorMatrizView(DMatrixControl dmController, boolean renomeavel) {
        initComponents();

        control = new EditorMatrizControl(dmController, this);

        campoNome.setEnabled(renomeavel);

        atualizarView();
    }

    /**
     * Chamado quando o controle dessa view carrega uma nova matriz
     */
    public void emCarregado() {
        SwingUtilities.invokeLater(() -> {
            atualizarView();
        });
    }

    /**
     * Atualiza a matriz no sentido control -> view
     */
    private void atualizarView() {
        SwingUtilities.invokeLater(() -> {
            campoNome.setText(control.obterNome());
            Matriz matriz = control.obterMatriz();

            int m = matriz.obterAltura();
            int n = matriz.obterLargura();

            spinnerLinhas.setValue(m);
            spinnerColunas.setValue(n);

            panelMatriz.atualizarView(matriz);
        });
    }

    /**
     * Atualiza a matriz no sentido view -> control
     *
     */
    private void atualizarControl() {
        String nome = campoNome.getText();
        control.definirNome(nome);
        Matriz matriz = control.obterMatriz();
        
        panelMatriz.atualizarControl(matriz);
        Historico h = matriz.obterHistorico();
        if(h != null){
            h.registrar(matriz);
            h.adcionarDescricao("Matriz editada");
        }
    }

    public EditorMatrizControl obterController() {
        return control;
    }

}
